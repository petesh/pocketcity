@include <stdapp.goh>
@include <foam.goh>
@include <math.goh>
@include "graphic.goh"
#include "source/handler.h"
#include "source/ui.h"
#include "source/globals.h"
#include "source/drawing.h"
#include "source/build.h"
#include "source/simulation.h"








word RunSimThread(word temp);





@class SimCityProcessClass, GenProcessClass;
@message void MSG_TEST_BUTTON_PRESSED();
@message void MSG_SIM_SHUTDOWN();
@message void MSG_SIM_DUMMY();
@endc;

@class SimViewClass, GenViewClass;
@endc

@class  SimBoardClass, VisContentClass;
@message void MSG_SIM_GAME_LOOP();
@message void MSG_SIM_BOARD_DUMMY();
@endc


@classdecl      SimCityProcessClass;
@classdecl		SimViewClass;
@classdecl      SimBoardClass;



@start AppResource;
@object FoamSubApplicationClass SimCityApp = {
    GI_visMoniker = list { @SimCityTextMoniker };
    GI_comp = @SimCityPrimary;
    FSAI_launcherApp = FA_EXTRAS_APP;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @SimCityPrimary;
}
@visMoniker SimCityTextMoniker = "Pocket\rCity";
@end AppResource;






@start Interface;
@object GenPrimaryClass SimCityPrimary = {
    GI_comp = @SimView,
		      @SimCityCloseTrigger,
		      @SimCityBuildTrigger,
			  @BuildDialog;
}


@object ComplexMonikerClass SimCityCloseTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = @SimClose;
    GTI_actionMsg = MSG_SIM_SHUTDOWN;
    GTI_destination = process;
    HINT_SEEK_MENU_BAR;
    HINT_SEEK_REPLY_BAR;
    HINT_SEEK_SLOT = 3;
}

@object ComplexMonikerClass SimCityBuildTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = @SimBuildText;
    GTI_actionMsg = MSG_GEN_INTERACTION_INITIATE;
    GTI_destination = @BuildDialog;
    HINT_SEEK_MENU_BAR;
    HINT_SEEK_REPLY_BAR;
    HINT_SEEK_SLOT = 0;
}

@object SimViewClass SimView = {
    GVI_content = @SimBoard;   
    GVI_docBounds = {0, 0, 490, 200};
    GVI_color = { C_WHITE, 0, 0, 0 };   
    GVI_horizAttrs = @default   | GVDA_NO_LARGER_THAN_CONTENT
				| GVDA_NO_SMALLER_THAN_CONTENT;
    GVI_vertAttrs = @default    | GVDA_NO_LARGER_THAN_CONTENT
				| GVDA_NO_SMALLER_THAN_CONTENT
				| GVDA_KEEP_ASPECT_RATIO;
    ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
    HINT_DEFAULT_FOCUS;
}

@object SimBoardClass SimBoard = { 
    VI_bounds = {0, 0, 490, 200};
    VCI_geoAttrs = VCGA_CUSTOM_MANAGE_CHILDREN;
}

// build dialog

@object GenInteractionClass BuildDialog = {
    GI_comp = @SimBuildGroup, @BuildOKTrigger;
    GII_visibility = GIV_POPUP;
    GII_type = GIT_COMMAND;
    GII_attrs = @default | GIA_NOT_USER_INITIATABLE | GIA_MODAL;
	HINT_CUSTOM_CHILD_SPACING = SST_PIXELS | 0;
	HINT_DO_NOT_USE_MONIKER;
}


@object GenTriggerClass BuildOKTrigger = {
    GI_visMoniker = "OK";
    ATTR_GEN_TRIGGER_INTERACTION_COMMAND = { IC_DISMISS };
    HINT_SEEK_MENU_BAR;
    HINT_SEEK_REPLY_BAR;
    HINT_SEEK_SLOT = 0;
	HINT_DEFAULT_DEFAULT_ACTION;
}



@chunk TCHAR SimBuildGroupTitle[] = "Build Menu";

@object ComplexMonikerClass SimBuildGroup = {
    ComplexMoniker = GenInteractionClass;
    CMI_topText = @SimBuildGroupTitle;
    CMI_fontSize = FOAM_NORMAL_FONT_SIZE;
	GI_comp = @BuildList;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_PLACE_MONIKER_TO_LEFT;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
}



@object GenItemGroupClass BuildList = {
    GI_comp = @BuildItem1,
			  @BuildItem2,
			  @BuildItem3,
			  @BuildItem4,
			  @BuildItem5,
			  @BuildItem6,
			  @BuildItem7,
			  @BuildItem8,
			  @BuildItem9,
			  @BuildItem10;
    GIGI_selection = 0;
    GIGI_numSelections = 1;
    HINT_INDENT_CHILDREN = { 0 };
	HINT_ITEM_GROUP_SCROLLABLE;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}


@object GenItemClass BuildItem1  = { GII_identifier = 0; GI_visMoniker = "Bulldoze ---$5"; }
@object GenItemClass BuildItem2  = { GII_identifier = 1; GI_visMoniker = "Residential ---$50"; }
@object GenItemClass BuildItem3  = { GII_identifier = 2; GI_visMoniker = "Commercial ---$50"; }
@object GenItemClass BuildItem4  = { GII_identifier = 3; GI_visMoniker = "Industrial ---$50"; }
@object GenItemClass BuildItem5  = { GII_identifier = 4; GI_visMoniker = "Road ---$20"; }
@object GenItemClass BuildItem6  = { GII_identifier = 5; GI_visMoniker = "Power Plant ---$3000 "; }
@object GenItemClass BuildItem7  = { GII_identifier = 6; GI_visMoniker = "Nuclear Plant ---$10000"; }
@object GenItemClass BuildItem8  = { GII_identifier = 7; GI_visMoniker = "Power Line ---$5"; }
@object GenItemClass BuildItem9  = { GII_identifier = 8; GI_visMoniker = "Tree ---$10"; }
@object GenItemClass BuildItem10 = { GII_identifier = 9; GI_visMoniker = "Water ---$200"; }






@chunk TCHAR SimCityOutOfMemory[] = "Out of memory!";
@chunk TCHAR SimCityReallyQuit[] = "Really quit?\rThe running game will be lost!";
@chunk TCHAR SimClose[] = "Quit";
@chunk TCHAR SimBuildText[] = "Build";

@end Interface;




/* globals */
optr graphic[256];
GStateHandle tmpGstate;
MemHandle worldHandle;
MemHandle worldFlagsHandle;
char RepeatBuild;
TimerHandle thTimer;
int ThreadRunning = 0;
word timerID; 


@method SimCityProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
	ZakMain();
	FloatRandomize(RGIF_GENERATE_SEED,49);
	@callsuper();
    thTimer = TimerStart(TIMER_EVENT_CONTINUAL,
			 @SimBoard,
			 100,
			 MSG_SIM_GAME_LOOP,
			 600,
			 &timerID);
}

@method SimCityProcessClass, MSG_TEST_BUTTON_PRESSED
{
	OnZakEvent(0);
}

@method SimBoardClass, MSG_SIM_BOARD_DUMMY {}


@method SimBoardClass, MSG_SIM_GAME_LOOP
{
	if (!ThreadRunning)
	{
		ThreadRunning = 1;
		// run a frame of the simulation
		ThreadCreate(
			PRIORITY_STANDARD,
			0,
			RunSimThread,
			4096,
			GeodeGetProcessHandle()
		);
	}
}


word RunSimThread(word temp)
{
	int retval = 1;
	ThreadRunning=1;
	//if (GameSpeed != SPEED_PAUSED)
	//{
		while (retval != 0) 
		{
			retval = Sim_DoPhase(retval);
		}
		//@call SimBoard::MSG_VIS_INVALIDATE();
		RedrawAllFields();
		
			
	//}
	ThreadRunning=0;
	return temp;
}


extern unsigned long GetRandomNumber(unsigned long max)
{
  long double randomX;

  randomX = max;
  FloatPushNumber(&randomX);
  FloatRandomN();
  FloatPopNumber(&randomX);

  return (unsigned long)randomX;
}



@method SimBoardClass, MSG_VIS_DRAW {

	if ((drawFlags & DF_EXPOSED) == DF_EXPOSED)
	{
	  DrawGame(1);
	}
	else
	{
	  DrawGame(0);
	}

	@callsuper();
}






extern int UIDisplayError(int nError)
{
	switch (nError)
	{
	case MSG_ERROR_OUT_OF_MEMORY: FoamDisplayError(@SimCityOutOfMemory); break;
	case MSG_QUESTION_REALLY_QUIT: return FoamDisplayQuestion(@SimCityReallyQuit);
	}

	return 0;
}

int GStateLockCount = 0;

extern void UIInitDrawing(void)
{
	WindowHandle winHandle;
	if (tmpGstate != 0) { return; } // GStateHandle already created
    winHandle = @call SimBoard::MSG_VIS_QUERY_WINDOW();
    tmpGstate = GrCreateState(winHandle);
	GStateLockCount++;
}


extern void UIFinishDrawing()
{
	if (tmpGstate == 0 || GStateLockCount > 0) { return; }
	GrDestroyState(tmpGstate);
	tmpGstate = 0;
	GStateLockCount--;
}


extern void UIDrawBorder(void)
{
    if (tmpGstate == 0) { return; }
	GrDrawRect(tmpGstate,4,20,visible_x*TILE_SIZE+5,visible_y*TILE_SIZE+21);

}




extern void UIDrawField(int xpos, int ypos, unsigned char nGraphic)
{
	MemLock(OptrToHandle(graphic[nGraphic]));
	GrDrawBitmap(tmpGstate, 5+(xpos*TILE_SIZE), 21+(ypos*TILE_SIZE), LMemDeref(graphic[nGraphic]), 0);
	MemUnlock(OptrToHandle(graphic[nGraphic]));
}




/*** memory handlers ***/
extern int InitWorld(void)
{
	worldHandle = MemAlloc(10, HF_SWAPABLE, HAF_ZERO_INIT);
	worldFlagsHandle = MemAlloc(10, HF_SWAPABLE, HAF_ZERO_INIT);

	if (worldHandle == 0 || worldFlagsHandle == 0)
	{
		UIDisplayError(0);
		return 0;
	}
	return 1;
}


extern unsigned char UIGetSelectedBuildItem(void)
{
	return (@call BuildList::MSG_GEN_ITEM_GROUP_GET_SELECTION());
}


extern int ResizeWorld(long unsigned size)
{
	char * pWorld;
	char * pWorldFlags;
	int i;
	
	worldHandle = MemReAlloc(worldHandle, size, HAF_ZERO_INIT);
	worldFlagsHandle = MemReAlloc(worldFlagsHandle, size, HAF_ZERO_INIT);

	if (worldHandle == 0 || worldFlagsHandle == 0)
	{
		UIDisplayError(0);
		//QuitGameError();
		return 0;
	}

	LockWorld();
	LockWorldFlags();
	
	pWorld = MemDeref(worldHandle);
	pWorldFlags = MemDeref(worldFlagsHandle);
	for (i=0; i<size; i++) { *(pWorld+i) = 0; *(pWorldFlags+i) = 0; }

	UnlockWorld();
	UnlockWorldFlags();

	return 1;
}


extern	void LockWorld() { MemLock(worldHandle); }
extern	void UnlockWorld() { MemUnlock(worldHandle); }
extern	void LockWorldFlags() { MemLock(worldFlagsHandle); }
extern	void UnlockWorldFlags() { MemUnlock(worldFlagsHandle); }



extern unsigned char GetWorld(unsigned long pos)
{
	// NOTE: LockWorld() MUST have been called before this is used!!!
	if (pos > (mapsize*mapsize)) { return 0; }
	return ((unsigned char*)MemDeref(worldHandle))[pos];
}

extern void SetWorld(unsigned long pos, unsigned char value)
{
	if (pos > mapsize*mapsize) { return; }
	(((unsigned char*)MemDeref(worldHandle))[pos]) = value;
}



extern unsigned char GetWorldFlags(unsigned long pos)
{
	// NOTE: LockWorldFlags() MUST have been called before this is used!!!
	if (pos > (mapsize*mapsize)) { return 0; }
	return ((unsigned char*)MemDeref(worldFlagsHandle))[pos];
}

extern void SetWorldFlags(unsigned long pos, unsigned char value)
{
	if (pos > mapsize*mapsize) { return; }
	(((unsigned char*)MemDeref(worldFlagsHandle))[pos]) = value;
}


/*** end ***/




extern void UIDrawCursor(int xpos, int ypos)
{
	MemLock(OptrToHandle(graphic[9]) );
	GrDrawBitmap(tmpGstate, 5+(xpos*TILE_SIZE), 21+(ypos*TILE_SIZE), LMemDeref(graphic[9]), 0);
	MemUnlock(OptrToHandle(graphic[9]));
}



extern void UIDrawCredits(void)
{
	char temp[20];

	GrDrawText(tmpGstate,5,0,"$:",0);
	GrSetAreaColor(tmpGstate,CF_INDEX, C_WHITE,0,0);
	GrFillRect(tmpGstate, 20,0,170+300,20);
	GrSetAreaColor(tmpGstate,CF_INDEX, C_BLACK,0,0);
	
	LongToString(credits,(char*)temp);
	GrDrawText(tmpGstate,20,0,temp,0);
	GrDrawText(tmpGstate,390,0,GetDate((char*)temp),0);
}



extern void UIDrawPowerLoss(int xpos, int ypos)
{
	MemLock(OptrToHandle(graphic[8]) );
	GrDrawBitmap(tmpGstate, 5+(xpos*TILE_SIZE), 21+(ypos*TILE_SIZE), LMemDeref(graphic[8]), 0);
	MemUnlock(OptrToHandle(graphic[8]));
}



@method SimBoardClass, MSG_META_KBD_CHAR
{
    byte theChar;
	int UnknownKey = 1;



	if (!((flags & CF_REPEAT_PRESS) || (flags & CF_RELEASE)))
	{
		// normal key presses
		switch (character)
		{
	/*	case 'm':
			@send ExtraMenuDialog::MSG_GEN_INTERACTION_INITIATE();
			return;*/
		case 'r':
			@call BuildList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(1,FALSE);
			return;
		case 'c':
			@call BuildList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(2,FALSE);
			return;
		case 'i':
			@call BuildList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(3,FALSE);
			return;
		default:
			break;
		}
	}


	if (flags & (CF_FIRST_PRESS | CF_REPEAT_PRESS) && (character == ' ' || (character&0xFF) == VC_LCTRL))
	{
		RepeatBuild = 1;
		UnknownKey = 0;
	}

	if (flags & (CF_RELEASE) && (character == ' ' || (character&0xFF) == VC_LCTRL))
	{
		RepeatBuild = 0;
		UnknownKey = 0;
	}


    if ( ( ( character >> 8 ) == CS_CONTROL ) &&
	 ( flags & ( CF_FIRST_PRESS | CF_REPEAT_PRESS ) ) &&
	 ((character & 0xFF) == VC_ENTER))
    {
		// enter pressed
		@call BuildDialog::MSG_GEN_INTERACTION_INITIATE();
		return;

    }

	
	if ( ( ( character >> 8 ) == CS_CONTROL ) &&
	 ( flags & ( CF_FIRST_PRESS | CF_REPEAT_PRESS ) ) )
    {

		theChar = character & 0xFF;

		switch (theChar)
		{
		case VC_UP:
			MoveCursor(0);
			UnknownKey = 0;
			break;
		case VC_RIGHT:
			MoveCursor(1);			
			UnknownKey = 0;
			break;
		case VC_DOWN:
			MoveCursor(2);
			UnknownKey = 0;
			break;
		case VC_LEFT:
			MoveCursor(3);
			UnknownKey = 0;
			break;
		case VC_BACKSPACE:
			Build_Bulldoze(cursor_xpos, cursor_ypos);
			UnknownKey = 0;
			break;
		default:
			break;
		}
    }


	if (RepeatBuild == 1)
	{
		BuildSomething(cursor_xpos, cursor_ypos);
	}


	if (UnknownKey == 1)
	{
		@callsuper();
	}
}



@method SimCityProcessClass, MSG_SIM_SHUTDOWN
{
	// Frees memory, cleans up and quits sim city
	if (!UIDisplayError(MSG_QUESTION_REALLY_QUIT)) { return; }

	ZakStop();
	//StopSimulation();
	//UninitGame();
	@send SimCityApp::MSG_META_QUIT();
}

@method SimCityProcessClass, MSG_SIM_DUMMY
{

}


extern void UISetUpGraphic(void)
{
 // set up memory
	int i=0;

	graphic[0] = @DirtBmp;
	graphic[1] = @CommZone;
	graphic[2] = @ResZone;
	graphic[3] = @IndZone;
	
	graphic[4] = @DirtBmp;				// special (roads)
	graphic[5] = @DirtBmp;				// special (non-crossing power lines)
	graphic[6] = @PowerMaskUpDown;		// special
	graphic[7] = @PowerMaskLeftRight;	// special
	graphic[8] = @PowerLoss;			// overlayed when out of power
	graphic[9] = @CursorBmp;

	// roads:
	graphic[10] = @RoadLeftRight;		// -			b || d 
	graphic[11] = @RoadUpDown;			// |			a || c
	graphic[12] = @RoadRightDown;		// .-			c && b				
	graphic[13] = @RoadLeftDown;		// -.			c && d
	graphic[14] = @RoadLeftUp;			// -'			a && d
	graphic[15] = @RoadRightUp;			// '-			a && b
	graphic[16] = @RoadLeftUpDown;		// -|			a && c && d
	graphic[17] = @RoadRightUpDown;		// |-			a && b && c 
	graphic[18] = @RoadRightLeftDown;	// v			b && c && d
	graphic[19] = @RoadRightLeftUp;		// ^			a && b && d
	graphic[20] = @RoadCross;			// -|-			a && b && c && d


	graphic[21] = @TreeBmp;
	graphic[22] = @WaterBmp;
	graphic[23] = @DirtBmp;
	graphic[24] = @DirtBmp;
	graphic[25] = @DirtBmp;
	graphic[26] = @DirtBmp;
	graphic[27] = @DirtBmp;
	graphic[28] = @DirtBmp;
	graphic[29] = @DirtBmp;


	// commercial buildings
	graphic[30] = @CommOne;
	graphic[31] = @CommTwo;
	graphic[32] = @CommThree;
	graphic[33] = @CommFour;
	graphic[34] = @CommFive;
	graphic[35] = @CommSix;
	graphic[36] = @CommSeven;
	graphic[37] = @CommEight;
	graphic[38] = @CommNine;
	graphic[39] = @CommTen;

	// residential buildings
	graphic[40] = @ResOne;
	graphic[41] = @ResTwo;
	graphic[42] = @ResThree;
	graphic[43] = @ResFour;
	graphic[44] = @ResFive;
	graphic[45] = @ResSix;
	graphic[46] = @ResSeven;
	graphic[47] = @ResEight;
	graphic[48] = @ResNine;
	graphic[49] = @ResTen;

	// industrial buildings
	graphic[50] = @IndOne;
	graphic[51] = @IndTwo;
	graphic[52] = @IndThree;
	graphic[53] = @IndFour;
	graphic[54] = @IndFive;
	graphic[55] = @IndSix;
	graphic[56] = @IndSeven;
	graphic[57] = @IndEight;
	graphic[58] = @IndNine;
	graphic[59] = @IndTen;


	graphic[60] = @PowerPlant;
	graphic[61] = @NulearPlant;
	graphic[62] = @DirtBmp;
	graphic[63] = @DirtBmp;
	graphic[64] = @DirtBmp;
	graphic[65] = @DirtBmp;
	graphic[66] = @DirtBmp;
	graphic[67] = @DirtBmp;
	graphic[68] = @DirtBmp;
	graphic[69] = @DirtBmp;

	// power lines
	graphic[70] = @PowerLeftRight;	
	graphic[71] = @PowerUpDown;		
	graphic[72] = @PowerRightDown;	
	graphic[73] = @PowerLeftDown;	
	graphic[74] = @PowerLeftUp;		
	graphic[75] = @PowerRightUp;		
	graphic[76] = @PowerLeftUpDown;	
	graphic[77] = @PowerRightUpDown;	
	graphic[78] = @PowerLeftRightDown;
	graphic[79] = @PowerLeftRightUp;
	graphic[80] = @PowerCross;		

	graphic[81] = @DirtBmp;
	graphic[82] = @DirtBmp;
	graphic[83] = @DirtBmp;
	graphic[84] = @DirtBmp;
	graphic[85] = @DirtBmp;
	graphic[86] = @DirtBmp;
	graphic[87] = @DirtBmp;
	graphic[88] = @DirtBmp;
	graphic[89] = @DirtBmp;
	graphic[90] = @DirtBmp;
	graphic[91] = @DirtBmp;
	graphic[92] = @DirtBmp;
	graphic[93] = @DirtBmp;
	graphic[94] = @DirtBmp;
	graphic[95] = @DirtBmp;
	graphic[96] = @DirtBmp;
	graphic[97] = @DirtBmp;
	graphic[98] = @DirtBmp;
	graphic[99] = @DirtBmp;

	for (i=100; i<256; i++) { graphic[i] = @DirtBmp; }


	// note: 200-255 are used special for save/load


}


